import { describe, it, expect } from 'vitest';

// TODO: assuming this is how yall create the user module
import { UserService } from '../user.service';

describe('UserService', () => {
    // Passing test
    it('should create a new user', async () => {
        const userService = new UserService();
        const userData = {
            email: 'test@example.com',
            password: 'password123', // NOTE: no password on actual model since we use google login
            name: 'Test User',
        };

        const user = await userService.createUser(userData);

        expect(user).toHaveProperty('id');
        expect(user.email).toBe(userData.email);
        expect(user.name).toBe(userData.name);
    });


    // Failing test - Password too short ( NOTE: THIS WILL BE REMOVED after you made sure that vitest is properly testing the modules )
    it('should fail to create user with short password', async () => {
        const userService = new UserService();
        const invalidUserData = {
            email: 'test@example.com',
            password: '123',  // Too short
            name: 'Test User',
        };

        await expect(
            userService.createUser(invalidUserData)
        ).rejects.toThrow('Password must be at least 8 characters long');
    });
});
