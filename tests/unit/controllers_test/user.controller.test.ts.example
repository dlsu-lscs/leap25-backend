import { describe, it, expect, vi } from 'vitest';

// TODO: assuming this is how yall create the user module
import { UserController } from '@/controllers/user.controller';
import { UserService } from '@/services/user.service';

describe('UserController', () => {
  // Passing test
  it('should create user and return 201 status', async () => {
    const mockUserService = {
      createUser: vi.fn().mockResolvedValue({
        id: '1',
        email: 'test@example.com',
        name: 'Test User',
      }),
    };

    const controller = new UserController(mockUserService as UserService);
    const req = {
      body: {
        email: 'test@example.com',
        password: 'password123',
        name: 'Test User',
      },
    };
    const res = {
      status: vi.fn().mockReturnThis(),
      json: vi.fn(),
    };

    await controller.createUser(req, res);

    expect(res.status).toHaveBeenCalledWith(201);
    expect(mockUserService.createUser).toHaveBeenCalledWith(req.body);
  });

  // Failing test - Missing required fields ( NOTE: THIS WILL BE REMOVED after you made sure that vitest is properly testing the modules )
  it('should return 400 when required fields are missing', async () => {
    const mockUserService = {
      createUser: vi.fn(),
    };

    const controller = new UserController(mockUserService as UserService);
    const req = {
      body: {
        email: 'test@example.com',
        // missing password and name
      },
    };
    const res = {
      status: vi.fn().mockReturnThis(),
      json: vi.fn(),
    };

    await controller.createUser(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({
      error: 'Missing required fields: password, name',
    });
    expect(mockUserService.createUser).not.toHaveBeenCalled();
  });

  // Failing test - Service throws error ( NOTE: THIS WILL BE REMOVED after you made sure that vitest is properly testing the modules )
  it('should return 500 when service throws error', async () => {
    const mockUserService = {
      createUser: vi.fn().mockRejectedValue(new Error('Database error')),
    };

    const controller = new UserController(mockUserService as UserService);
    const req = {
      body: {
        email: 'test@example.com',
        password: 'password123',
        name: 'Test User',
      },
    };
    const res = {
      status: vi.fn().mockReturnThis(),
      json: vi.fn(),
    };

    await controller.createUser(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({
      error: 'Internal server error',
    });
  });

  // Failing test - Duplicate email ( NOTE: THIS WILL BE REMOVED after you made sure that vitest is properly testing the modules )
  it('should return 409 when email already exists', async () => {
    const mockUserService = {
      createUser: vi.fn().mockRejectedValue(new Error('Email already exists')),
    };

    const controller = new UserController(mockUserService as UserService);
    const req = {
      body: {
        email: 'existing@example.com',
        password: 'password123',
        name: 'Test User',
      },
    };
    const res = {
      status: vi.fn().mockReturnThis(),
      json: vi.fn(),
    };

    await controller.createUser(req, res);

    expect(res.status).toHaveBeenCalledWith(409);
    expect(res.json).toHaveBeenCalledWith({
      error: 'Email already exists',
    });
  });

  // Failing test - Invalid email format ( NOTE: THIS WILL BE REMOVED after you made sure that vitest is properly testing the modules )
  it('should return 400 when email format is invalid', async () => {
    const mockUserService = {
      createUser: vi.fn(),
    };

    const controller = new UserController(mockUserService as UserService);
    const req = {
      body: {
        email: 'invalid-email',
        password: 'password123',
        name: 'Test User',
      },
    };
    const res = {
      status: vi.fn().mockReturnThis(),
      json: vi.fn(),
    };

    await controller.createUser(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({
      error: 'Invalid email format',
    });
    expect(mockUserService.createUser).not.toHaveBeenCalled();
  });
});
